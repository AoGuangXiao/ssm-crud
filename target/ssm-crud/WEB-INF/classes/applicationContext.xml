<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- spring的配置文件，这里主要配置和业务逻辑有关的 -->
    <!-- 数据源，事务控制... -->
    
    <!-- 扫描注解 -->
    <context:component-scan base-package="com.agx.crud">
        <!-- 除去controller层，该层注解由springMVC扫描 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- ================================= 与mybatis的整合配置 ================================== -->
    <!-- 配置数据源 -->
    <!-- 导入properties文件 -->
    <context:property-placeholder location="classpath:dbConfig.properties"/>
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置mybatis的session工厂 -->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>  <!-- 指定数据源 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>  <!-- 指定mybatis配置文件位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>  <!-- 指定mybatis的mapper.xml文件的位置 -->
    </bean>

    <!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有dao接口，加入到IOC容器中 -->
        <property name="basePackage" value="com.agx.crud.dao"/>
    </bean>

    <!-- 配置一个可以执行批量的SqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="factory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>
    <!-- ===================================================================================== -->


    <!-- ==================================== 配置事务控制 ==================================== -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 指定控制的数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 开启基于注解的事务，还一种方式是使用xml配置形式的事务(必要主要的都使用xml形式) -->
    <aop:config>
        <aop:pointcut id="txPoint" expression="execution(* com.agx.crud.service..*(..))"/>
        <!-- 指定事务 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!-- 配置增强事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 以get开头的所有方法，所以设置为只读 -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- Spring配置文件的核心点(数据源、与mybatis的整合、事务控制) -->
</beans>
